<?php
/**
 * @file
 * Hook implementations of the Mastodon Toot module.
 */

/**
 * Implements hook_node_insert().
 */
function mastotoot_node_insert(Node $node) {
  $content_type = config_get('mastotoot.settings', 'content_type');

  if ($node->type == $content_type) {
    if (!empty($node->no_mastodon_share)) {
      db_insert('mastotoot_noshare')->fields(['nid' => $node->nid])->execute();
      return;
    }

    if ($node->status) {
      $toot = MastoToot::create($node);
      if ($toot) {
        $toot->submitToot();
      }
    }
  }
}

/**
 * Implements hook_node_update().
 */
function mastotoot_node_update(Node $node) {
  $content_type = config_get('mastotoot.settings', 'content_type');

  if ($node->type == $content_type) {
    $do_not_share = !empty($node->no_mastodon_share);
    $has_record = !empty($node->original->no_mastodon_share);
    if ($do_not_share && !$has_record) {
      db_insert('mastotoot_noshare')->fields(['nid' => $node->nid])->execute();
    }
    elseif (!$do_not_share && $has_record) {
      db_delete('mastotoot_noshare')
        ->condition('nid', $node->nid)
        ->execute();
    }
    if ($do_not_share) {
      return;
    }

    $new_status = $node->status;
    $original_status = $node->original->status;
    if ($new_status != $original_status) {
      $toot = MastoToot::create($node);
      if (!$toot) {
        return;
      }

      if ($new_status == NODE_PUBLISHED) {
        $toot->submitToot();
      }
      elseif ($new_status == NODE_NOT_PUBLISHED && $toot->isShared()) {
        $toot->deleteToot();
      }
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function mastotoot_node_delete(Node $node) {
  $content_type = config_get('mastotoot.settings', 'content_type');

  if ($node->type == $content_type) {
    // @todo Maybe ignore type here (setting might have changed)?
    $toot = MastoToot::create($node);
    if ($toot && $toot->isShared()) {
      $toot->deleteToot();
    }
    if (!empty($node->no_mastodon_share)) {
      db_delete('mastotoot_noshare')
        ->condition('nid', $node->nid)
        ->execute();
    }
  }
}

/**
 * Implements hook_menu().
 */
function mastotoot_menu() {
  $items['admin/config/services/mastotoot'] = [
    'title' => 'Mastodon Toot',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('mastotoot_form'),
    'access arguments' => array('configure mastotoot'),
    'file' => 'mastotoot.admin.inc',
  ];
  $items['admin/config/services/mastotoot/settings'] = [
    'title' => 'Mastodon Toot settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  ];
  $items['admin/config/services/mastotoot/verify'] = [
    'title' => 'Verify credentials',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('mastotoot_verify_token_form'),
    'access arguments' => array('configure mastotoot'),
    'file' => 'mastotoot.admin.inc',
    'type' => MENU_LOCAL_TASK,
  ];
  return $items;
}

/**
 * Implements hook_permission().
 */
function mastotoot_permission() {
  return [
    'configure mastotoot' => [
      'title' => t('Configure Mastodon Toot'),
      'description' => t('Configure settings for the Mastodon Toot module.'),
    ],
  ];
}

/**
 * Implements hook_autoload_info().
 */
function mastotoot_autoload_info() {
  return [
    'MastoToot' => 'mastotoot.class.inc',
  ];
}

/**
 * Implements hook_config_info().
 */
function mastotoot_config_info() {
  $prefixes['mastotoot.settings'] = [
    'label' => t('Mastodon Toot settings'),
    'group' => t('Configuration'),
  ];
  return $prefixes;
}

/**
 * Implements hook_views_api().
 */
function mastotoot_views_api() {
  return [
    'api' => 3,
    'path' => backdrop_get_path('module', 'mastotoot'),
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function mastotoot_form_node_form_alter(&$form, $form_state, $form_id) {
  $content_type = config_get('mastotoot.settings', 'content_type');
  if ($form_id == $content_type . '_node_form') {
    // Can be stub on node creation, but exists.
    $node = $form['#node'];
    // New node or unpublished.
    if (empty($node->nid) || !$node->status) {
      $form['options']['no_mastodon_share'] = [
        '#type' => 'checkbox',
        '#title' => t('Do not share on Mastodon'),
        '#default_value' => !empty($node->no_mastodon_share) ? 1 : 0,
        '#description' => t('When this node is published, do not share it on your Mastodon instance.'),
      ];
    }
  }
}

/**
 * Implements hook_node_submit().
 *
 * Attach dynamic property so it's available in insert/update/delete hooks,
 * where the nid will be available for new nodes.
 */
function mastotoot_node_submit(Node $node, $form, &$form_state) {
  $content_type = config_get('mastotoot.settings', 'content_type');
  if ($node->type == $content_type) {
    if (!empty($form_state['values']['no_mastodon_share'])) {
      $node->no_mastodon_share = 1;
    }
  }
}

/**
 * Implements hook_node_load().
 *
 * This is necessary for scheduled nodes, which need the information in node's
 * hook_cron.
 */
function mastotoot_node_load($nodes, $types) {
  $content_type = config_get('mastotoot.settings', 'content_type');

  // Return early if none of the types to load affect us.
  if (!in_array($content_type, $types)) {
    return;
  }

  $not_to_share = db_query('SELECT nid FROM {mastotoot_noshare} WHERE nid IN(:nids)', array(
    ':nids' => array_keys($nodes),
  ))->fetchAllAssoc('nid');
  foreach (array_keys($not_to_share) as $nid) {
    $nodes[$nid]->no_mastodon_share = 1;
  }
}
